package WebService::Freshservice::User;

use v5.010;
use strict;
use warnings;
use Method::Signatures 20140224;
use Moo;
use namespace::clean;

# ABSTRACT: Freshservice User

# VERSION: Generated by DZP::OurPkg:Version

=head1 SYNOPSIS

  use WebService::Freshservice::User;

  my $request = WebService::Freshservice::User->new( api => $api, id => '1234567890' );

Requires an 'WebService::Freshservice::API' object and user id.

=head1 DESCRIPTION

Provides a Freshservice object.

=cut

my $Ref = sub {
    croak("api isn't a 'WebService::Freshservice::API' object!") unless $_[0]->DOES("WebService::Freshservice::API");
};

# Library Fields
has 'api'               => ( is => 'rw', required => 1, isa => $Ref );
has 'id'                => ( is => 'ro', required => 1 );
has '_raw'              => ( is => 'rwp', lazy => 1, builder => 1 );

# Fixed fields
has 'active'            => ( is => 'rwp', lazy => 1, builder => '_build_user' );
has 'created_at'        => ( is => 'rwp', lazy => 1, builder => '_build_user' );
has 'custom_field'      => ( is => 'rwp', lazy => 1, builder => '_build_user' );
has 'deleted'           => ( is => 'rwp', lazy => 1, builder => '_build_user' );
has 'department_names'  => ( is => 'rwp', lazy => 1, builder => '_build_user' );
has 'helpdesk_agent'    => ( is => 'rwp', lazy => 1, builder => '_build_user' );
has 'updated_at'        => ( is => 'rwp', lazy => 1, builder => '_build_user' );

# Updateable Fields
has 'address'           => ( is => 'rw', lazy => 1, builder => '_build_user' );
has 'description'       => ( is => 'rw', lazy => 1, builder => '_build_user' );
has 'email'             => ( is => 'rw', lazy => 1, builder => '_build_user' );
has 'external_id'       => ( is => 'rw', lazy => 1, builder => '_build_user' );
has 'language'          => ( is => 'rw', lazy => 1, builder => '_build_user' );
has 'location_name'     => ( is => 'rw', lazy => 1, builder => '_build_user' );
has 'job_title'         => ( is => 'rw', lazy => 1, builder => '_build_user' );
has 'mobile'            => ( is => 'rw', lazy => 1, builder => '_build_user' );
has 'name'              => ( is => 'rw', lazy => 1, builder => '_build_user' );
has 'phone'             => ( is => 'rw', lazy => 1, builder => '_build_user' );
has 'time_zone'         => ( is => 'rw', lazy => 1, builder => '_build_user' );

method _build__raw {
  return $self->api->get_api( "itil/requesters/".$self->id.".json" );
}

method _build_user {
  # Grab our calling method by dropping 'WebService::Freshservice::User::'
  my $caller = substr((caller 1)[3],32);
  return $self->_raw->{user}{$caller};
}

1;
